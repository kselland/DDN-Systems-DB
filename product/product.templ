package product

import "ddn/ddn/components"
import "fmt"
import "strconv"
import "ddn/ddn/appPaths"
import "ddn/ddn/db"

templ newTemplate(s *db.Session, fp db.FormProduct, v ProductValidation, colors []db.Color) {
	@components.RootLayout("Create product | DDN") {
		@components.TopBar(components.TopBarParams { BackUrl: appPaths.ProductListing.WithNoParams() }) {
			New Product
		}
		@EditableProductComponent(s, fp, v, colors)
	}
}

templ viewTemplate(s *db.Session, fp db.FormProduct, v ProductValidation, colors []db.Color) {
	@components.RootLayout(fmt.Sprintf("%s | DDN", fp.Name)) {
		@components.TopBar(components.TopBarParams { BackUrl: appPaths.ProductListing.WithNoParams() }) {
			Editing Product
		}
		@EditableProductComponent(s, fp, v, colors)
	}
}

templ indexTemplate(s *db.Session, products []db.DisplayableProduct) {
	@components.RootLayout("Products | DDN") {
		@components.TopBar(components.TopBarParams { BackUrl: appPaths.Dashboard.WithNoParams() }) {
			Products
		}
		@components.Table() {
			<thead>
				@components.Tr() {
					@components.Th(true) {Name}
					@components.Th(true) {Type}
					@components.Th(true) {Color}
					@components.Th(true) {Length}
					@components.Th(true) {Width}
					@components.Th(true) {Height}
					@components.Th(false) {
						<div class="flex w-full">
							<a
								class="rounded-t-md outline-none focus:bg-gray-200 dark:focus:bg-slate-600 ml-auto p-3"
								href={ appPaths.ProductNew.WithNoParams() }
							>
								<span class="w-4 h-4 icon-[heroicons-outline--plus]"></span>
							</a>
						</div>
					}
				}
			</thead>
			<tbody>
				for _, product := range products {
					@components.Tr() {
						@components.Td(true) {
							{ product.Name }
						}
						@components.Td(true) {
						    { string(product.Product_Type) }
						}
						@components.Td(true) {
							<span class="block p-2 w-full rounded-md" title={ product.Color_Name } { templ.Attributes{"style": "background-color: " + product.Color_Hex_Code }... }></span>
						}
						@components.Td(true) {
							{ strconv.Itoa(product.Length) }
						}
						@components.Td(true) {
							{ strconv.Itoa(product.Width ) }
						}
						@components.Td(true) {
							{ strconv.Itoa(product.Height) }
						}
						@components.Td(false) {
							<div class="flex">
								<form
									class="ml-auto"
									action={ appPaths.ProductDelete.WithParams(map[string]string{"id": fmt.Sprint(product.Id)}) }
									method="POST"
								>
									@components.CSRF(s.Csrf_Token)
									<button
										class="p-3 outline-none focus:bg-gray-200 dark:focus:bg-slate-600"
										aria-label={ "Delete product: " + product.Name }
									>
										<span class="w-4 h-4 icon-[heroicons-outline--trash]"></span>
									</button>
								</form>
								<a
									class="p-3 outline-none focus:bg-gray-200 dark:focus:bg-slate-600"
									href={ appPaths.Product.WithParams(map[string]string{"id": fmt.Sprint(product.Id)}) }
									aria-label={ "View and edit product: " + product.Name }
								>
									<span class="w-4 h-4 icon-[heroicons-outline--pencil]"></span>
								</a>
							</div>
						}
					}
				}
			</tbody>
		}
	}
}

templ EditableProductComponent(s *db.Session, fp db.FormProduct, v ProductValidation, colors []db.Color) {
	<form class="max-w-prose mx-auto mt-8 p-4 rounded-md shadow-md dark:shadow-slate-400" method="POST">
		@components.CSRF(s.Csrf_Token)
		if v.Root != "" {
			<p class="p-2 mb-4 rounded-md bg-red-400">{ v.Root }</p>
		}
		<div class="relative">
			<div class="flex flex-col gap-4">
				@components.TextInput(components.TextInputProps{
					Name:        "name",
					Value:       fp.Name,
					Label:       "Name",
					InputType:   "text",
					Required:    true,
					Placeholder: "Ex. VSB42SET",
				})
				<div class="flex">
					@components.SizeField("width", fp.Width, "W", "number")
					<span class="font-mono italic text-gray-600 p-1">&times;</span>
					@components.SizeField("length", fp.Length, "L", "number")
					<span class="font-mono italic text-gray-600 p-1">&times;</span>
					@components.SizeField("height", fp.Height, "H", "number")
				</div>
				@components.TextInput(components.TextInputProps{
					Name:      "price",
					Value:     fp.Price,
					Label:     "Price in dollars",
					InputType: "number",
					Required:  true,
				})
				<div class="flex focus-within:ring w-min rounded-full">
					<label class="text-black relative has-[:checked]:bg-blue-400 px-4 py-2 rounded-full rounded-r-none shadow-md border-r border-gray-400 bg-white">
						Cabinets
						<input
							checked?={ fp.Product_Type == "cabinet" }
							class="absolute top-0 left-0 w-full h-full opacity-0"
							type="radio"
							name="product_type"
							value="cabinet"
						/>
					</label>
					<label class="text-black relative has-[:checked]:bg-blue-400 px-4 py-2 rounded-full rounded-l-none shadow-md bg-white">
						Accessory
						<input
							checked?={ fp.Product_Type == "accessory" }
							class="absolute top-0 left-0 w-full h-full opacity-0"
							type="radio"
							name="product_type"
							value="accessory"
						/>
					</label>
				</div>
				<div class="flex items-end">
					<div class="ml-auto flex gap-2">
						<!-- TODO: Filter colors based on product_type. Maybe only in javascript, because without javascript they wouldn't be able to change the product type and select the color? -->
						for _, color := range colors {
							<input
								class="
                                    w-8 h-8 relative rounded-full focus:outline-none
                                    after:absolute after:top-0 after:left-0 after:border-2 after:shadow-md after:border-white after:w-full after:h-full after:rounded-full focus:after:ring-2 checked:after:ring-2 after:bg-[var(--color)]
                                "
								{ templ.Attributes{"style": "--color: " + color.Hex_Code }... }
								type="radio"
								name="color_name"
								value={ color.Name }
								checked?={ fp.Color_Name == color.Name }
								title={ color.Name }
							/>
						}
					</div>
				</div>
				<div class="update-data-actions flex flex-row-reverse gap-4">
					if fp.Id == nil {
						@components.Button("submit") {
							Save
						}
					} else {
						@components.Button("submit") {
							Update
						}
					}
					if fp.Id == nil {
						@components.AButton(appPaths.ProductListing.WithParams(map[string]string{})) {
							Cancel
						}
					} else {
						@components.Button("reset") {
							Reset
						}
					}
				</div>
			</div>
		</div>
	</form>
}
