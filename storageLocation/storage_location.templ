package storageLocation

import "ddn/ddn/components"
import "fmt"
import "strconv"
import "ddn/ddn/appPaths"
import "ddn/ddn/db"

templ newTemplate(s *db.Session, fsl db.FormStorageLocation, v db.StorageLocationValidation, colors []db.Color) {
	@components.RootLayout("Create storage location | DDN") {
		@components.TopBar(components.TopBarParams{BackUrl: appPaths.StorageLocationListing.WithNoParams()}) {
			New Storage Location
		}
		@EditableStorageLocationComponent(s, fsl, v, colors)
	}
}

templ viewTemplate(s *db.Session, fsl db.FormStorageLocation, v db.StorageLocationValidation, colors []db.Color) {
	@components.RootLayout(fmt.Sprintf("Storage Location: %s | DDN", fsl.Bin)) {
		@components.TopBar(components.TopBarParams{BackUrl: appPaths.StorageLocationListing.WithNoParams()}) {
			Editing Storage Location
		}
		@EditableStorageLocationComponent(s, fsl, v, colors)
	}
}

templ indexTemplate(s *db.Session, storageLocations []db.StorageLocation) {
	@components.RootLayout("Storage Locations | DDN") {
		@components.TopBar(components.TopBarParams{BackUrl: appPaths.Dashboard.WithNoParams()}) {
			StorageLocations
		}
		<main class="p-4">
			@components.Table() {
				<thead>
					@components.Tr() {
						@components.Th(true) {
							Bin
						}
						@components.Th(true) {
							Size <span class="text-gray-400">(</span>L<span class="text-gray-400">x</span>W<span class="text-gray-400">x</span>H<span class="text-gray-400">)</span>
						}
						@components.Th(false) {
							<div class="flex w-full">
								<a
									class="rounded-t-md outline-none focus:bg-gray-200 dark:focus:bg-slate-600 ml-auto p-3"
									href={ appPaths.StorageLocationNew.WithNoParams() }
								>
									<span class="w-4 h-4 icon-[heroicons-outline--plus]"></span>
								</a>
							</div>
						}
					}
				</thead>
				<tbody>
					if len(storageLocations) == 0 {
						<tr><td colspan="3" class="p-4">No storage locations</td></tr>
					}
					for _, storageLocation := range storageLocations {
						@components.Tr() {
							@components.Td(true) {
								{ storageLocation.Bin }
							}
							@components.Td(true) {
								{ strconv.Itoa(storageLocation.Length) }x{ strconv.Itoa(storageLocation.Width ) }x{ strconv.Itoa(storageLocation.Height) }
							}
							@components.Td(false) {
								<div class="flex">
									<form class="ml-auto" action={ templ.URL(fmt.Sprintf("/app/storage-location/%d/delete", storageLocation.Id)) } method="POST">
										@components.CSRF(s.Csrf_Token)
										<button
											class="p-3 outline-none focus:bg-gray-200 dark:focus:bg-slate-600"
											aria-label={ "Delete storage location: " + storageLocation.Bin }
										>
											<span class="w-4 h-4 icon-[heroicons-outline--trash]"></span>
										</button>
									</form>
									<a
										class="p-3 outline-none focus:bg-gray-200 dark:focus:bg-slate-600"
										href={ appPaths.StorageLocation.WithParams(map[string]string{"id": strconv.Itoa(storageLocation.Id)}) }
										aria-label={ "View and edit storage location: " + storageLocation.Bin }
									>
										<span class="w-4 h-4 icon-[heroicons-outline--pencil]"></span>
									</a>
								</div>
							}
						}
					}
				</tbody>
			}
		</main>
	}
}

templ EditableStorageLocationComponent(s *db.Session, fsl db.FormStorageLocation, v db.StorageLocationValidation, colors []db.Color) {
	<form class="max-w-prose mx-auto mt-8 p-4 rounded-md dark:shadow-slate-400 shadow-md" method="POST">
		@components.CSRF(s.Csrf_Token)
		if v.Root != "" {
			<p class="p-2 mb-4 rounded-md bg-red-400">{ v.Root }</p>
		}
		<div class="relative">
			<div class="flex flex-col gap-4">
				@components.TextInput(components.TextInputProps{
					Name:      "bin",
					InputType: "text",
					Required:  true,
					Label:     "Bin",
					Value:     fsl.Bin,
				})
				@components.TextInput(components.TextInputProps{
					Name:      "width",
					InputType: "number",
					Required:  true,
					Label:     "Width",
					Value:     fsl.Width,
				})
				@components.TextInput(components.TextInputProps{
					Name:      "length",
					InputType: "number",
					Required:  true,
					Label:     "Length",
					Value:     fsl.Length,
				})
				@components.TextInput(components.TextInputProps{
					Name:      "height",
					InputType: "number",
					Required:  true,
					Label:     "Height",
					Value:     fsl.Height,
				})
				@components.Button("submit") {
					Submit
				}
				<div class="absolute top-4 right-4 flex gap-4">
					<div class="update-data-actions flex flex-row-reverse">
						<button class="submit-button text-4xl">&check;</button>
						if fsl.Id == nil {
							<a href={ appPaths.StorageLocationListing.WithParams(map[string]string{}) } class="cancel-button text-4xl">&times;</a>
						} else {
							<button type="reset" class="cancel-button text-4xl">&times;</button>
						}
					</div>
				</div>
			</div>
			<!-- TODO: Add a link to the inventory for this bin. If there isn't inventory for it then it should go to a creation form with the bin preselected -->
		</div>
	</form>
	<script>
        document.querySelector(".update-data-actions").classList.add("hidden");

        function showSubmitButton() {
            document.querySelector(".update-data-actions").classList.remove("hidden");
            document.removeEventListener("input", showSubmitButton);
        }
        document.addEventListener("input", showSubmitButton);
	</script>
}
